/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BummyCoreInterfaceInterface extends utils.Interface {
  functions: {
    "getBummy(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getBummy"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBummy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getBummy", data: BytesLike): Result;

  events: {};
}

export interface BummyCoreInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BummyCoreInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBummy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isGestating: boolean;
        isReady: boolean;
        cooldownIndex: BigNumber;
        nextActionAt: BigNumber;
        cheeringWithId: BigNumber;
        birthTime: BigNumber;
        momId: BigNumber;
        dadId: BigNumber;
        generation: BigNumber;
        genes: BigNumber;
      }
    >;
  };

  getBummy(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isGestating: boolean;
      isReady: boolean;
      cooldownIndex: BigNumber;
      nextActionAt: BigNumber;
      cheeringWithId: BigNumber;
      birthTime: BigNumber;
      momId: BigNumber;
      dadId: BigNumber;
      generation: BigNumber;
      genes: BigNumber;
    }
  >;

  callStatic: {
    getBummy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isGestating: boolean;
        isReady: boolean;
        cooldownIndex: BigNumber;
        nextActionAt: BigNumber;
        cheeringWithId: BigNumber;
        birthTime: BigNumber;
        momId: BigNumber;
        dadId: BigNumber;
        generation: BigNumber;
        genes: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getBummy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBummy(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
